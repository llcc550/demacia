// Code generated by goctl. DO NOT EDIT!
// Source: sms.proto

package smshandler

import (
	"context"

	"demacia/service/sms/rpc/sms"

	"gitlab.u-jy.cn/xiaoyang/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseSms          = sms.BaseSms
	ContentMobile    = sms.ContentMobile
	MultiSendRequest = sms.MultiSendRequest
	Null             = sms.Null
	RmqData          = sms.RmqData
	SendRequest      = sms.SendRequest
	SmsContent       = sms.SmsContent
	SmsSendResponse  = sms.SmsSendResponse

	SmsHandler interface {
		MultiSend(ctx context.Context, in *MultiSendRequest, opts ...grpc.CallOption) (*SmsSendResponse, error)
		Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SmsSendResponse, error)
		Push(ctx context.Context, in *RmqData, opts ...grpc.CallOption) (*Null, error)
	}

	defaultSmsHandler struct {
		cli zrpc.Client
	}
)

func NewSmsHandler(cli zrpc.Client) SmsHandler {
	return &defaultSmsHandler{
		cli: cli,
	}
}

func (m *defaultSmsHandler) MultiSend(ctx context.Context, in *MultiSendRequest, opts ...grpc.CallOption) (*SmsSendResponse, error) {
	client := sms.NewSmsHandlerClient(m.cli.Conn())
	return client.MultiSend(ctx, in, opts...)
}

func (m *defaultSmsHandler) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SmsSendResponse, error) {
	client := sms.NewSmsHandlerClient(m.cli.Conn())
	return client.Send(ctx, in, opts...)
}

func (m *defaultSmsHandler) Push(ctx context.Context, in *RmqData, opts ...grpc.CallOption) (*Null, error) {
	client := sms.NewSmsHandlerClient(m.cli.Conn())
	return client.Push(ctx, in, opts...)
}
