// Code generated by goctl. DO NOT EDIT!
// Source: coursetable.proto

package coursetableclient

import (
	"context"

	"demacia/datacenter/coursetable/rpc/coursetable"

	"gitlab.u-jy.cn/xiaoyang/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClassIdAndMemberIdReq   = coursetable.ClassIdAndMemberIdReq
	ClassIdAndMemberInfoReq = coursetable.ClassIdAndMemberInfoReq
	CourseInfoReq           = coursetable.CourseInfoReq
	CourseTableDeploy       = coursetable.CourseTableDeploy
	CourseTableDeployResp   = coursetable.CourseTableDeployResp
	CourseTableInfoResp     = coursetable.CourseTableInfoResp
	CourseTableRecord       = coursetable.CourseTableRecord
	CourseTableRecordResp   = coursetable.CourseTableRecordResp
	OrgIdAndClassIdReq      = coursetable.OrgIdAndClassIdReq
	OrgIdReq                = coursetable.OrgIdReq
	SuccessResp             = coursetable.SuccessResp

	Coursetable interface {
		GetCourseTableDeployListByOrgId(ctx context.Context, in *OrgIdReq, opts ...grpc.CallOption) (*CourseTableDeployResp, error)
		GetCourseTableInfoByOrgIdAndSort(ctx context.Context, in *CourseInfoReq, opts ...grpc.CallOption) (*CourseTableInfoResp, error)
		GetCourseTableRecordInfo(ctx context.Context, in *OrgIdAndClassIdReq, opts ...grpc.CallOption) (*CourseTableRecordResp, error)
		RemoveCourseTeacher(ctx context.Context, in *ClassIdAndMemberIdReq, opts ...grpc.CallOption) (*SuccessResp, error)
		UpdateCourseTeacher(ctx context.Context, in *ClassIdAndMemberInfoReq, opts ...grpc.CallOption) (*SuccessResp, error)
	}

	defaultCoursetable struct {
		cli zrpc.Client
	}
)

func NewCoursetable(cli zrpc.Client) Coursetable {
	return &defaultCoursetable{
		cli: cli,
	}
}

func (m *defaultCoursetable) GetCourseTableDeployListByOrgId(ctx context.Context, in *OrgIdReq, opts ...grpc.CallOption) (*CourseTableDeployResp, error) {
	client := coursetable.NewCoursetableClient(m.cli.Conn())
	return client.GetCourseTableDeployListByOrgId(ctx, in, opts...)
}

func (m *defaultCoursetable) GetCourseTableInfoByOrgIdAndSort(ctx context.Context, in *CourseInfoReq, opts ...grpc.CallOption) (*CourseTableInfoResp, error) {
	client := coursetable.NewCoursetableClient(m.cli.Conn())
	return client.GetCourseTableInfoByOrgIdAndSort(ctx, in, opts...)
}

func (m *defaultCoursetable) GetCourseTableRecordInfo(ctx context.Context, in *OrgIdAndClassIdReq, opts ...grpc.CallOption) (*CourseTableRecordResp, error) {
	client := coursetable.NewCoursetableClient(m.cli.Conn())
	return client.GetCourseTableRecordInfo(ctx, in, opts...)
}

func (m *defaultCoursetable) RemoveCourseTeacher(ctx context.Context, in *ClassIdAndMemberIdReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	client := coursetable.NewCoursetableClient(m.cli.Conn())
	return client.RemoveCourseTeacher(ctx, in, opts...)
}

func (m *defaultCoursetable) UpdateCourseTeacher(ctx context.Context, in *ClassIdAndMemberInfoReq, opts ...grpc.CallOption) (*SuccessResp, error) {
	client := coursetable.NewCoursetableClient(m.cli.Conn())
	return client.UpdateCourseTeacher(ctx, in, opts...)
}
