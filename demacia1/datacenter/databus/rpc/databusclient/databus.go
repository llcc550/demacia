// Code generated by goctl. DO NOT EDIT!
// Source: databus.proto

package databusclient

import (
	"context"

	"demacia/datacenter/databus/rpc/databus"

	"gitlab.u-jy.cn/xiaoyang/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LogReq = databus.LogReq
	Req    = databus.Req
	Res    = databus.Res

	Databus interface {
		Create(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
		Update(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
		Delete(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
		Log(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*Res, error)
	}

	defaultDatabus struct {
		cli zrpc.Client
	}
)

func NewDatabus(cli zrpc.Client) Databus {
	return &defaultDatabus{
		cli: cli,
	}
}

func (m *defaultDatabus) Create(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	client := databus.NewDatabusClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultDatabus) Update(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	client := databus.NewDatabusClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultDatabus) Delete(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	client := databus.NewDatabusClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultDatabus) Log(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*Res, error) {
	client := databus.NewDatabusClient(m.cli.Conn())
	return client.Log(ctx, in, opts...)
}
