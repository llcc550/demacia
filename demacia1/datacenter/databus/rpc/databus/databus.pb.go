// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.19.4
// source: databus.proto

package databus

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic    string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	ObjectId int64  `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_databus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_databus_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Req) GetObjectId() int64 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

type Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Res) Reset() {
	*x = Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_databus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_databus_proto_rawDescGZIP(), []int{1}
}

func (x *Res) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type LogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip    string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Route string `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	Jwt   string `protobuf:"bytes,3,opt,name=jwt,proto3" json:"jwt,omitempty"`
	Req   string `protobuf:"bytes,4,opt,name=req,proto3" json:"req,omitempty"`
}

func (x *LogReq) Reset() {
	*x = LogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogReq) ProtoMessage() {}

func (x *LogReq) ProtoReflect() protoreflect.Message {
	mi := &file_databus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogReq.ProtoReflect.Descriptor instead.
func (*LogReq) Descriptor() ([]byte, []int) {
	return file_databus_proto_rawDescGZIP(), []int{2}
}

func (x *LogReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LogReq) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *LogReq) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

func (x *LogReq) GetReq() string {
	if x != nil {
		return x.Req
	}
	return ""
}

var File_databus_proto protoreflect.FileDescriptor

var file_databus_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x62, 0x75, 0x73, 0x22, 0x38, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x1d, 0x0a, 0x03, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x52, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6a, 0x77, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x65, 0x71, 0x32, 0xa1, 0x01, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x62, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x1a,
	0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x75, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x0f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x75, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x42, 0x09, 0x5a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_databus_proto_rawDescOnce sync.Once
	file_databus_proto_rawDescData = file_databus_proto_rawDesc
)

func file_databus_proto_rawDescGZIP() []byte {
	file_databus_proto_rawDescOnce.Do(func() {
		file_databus_proto_rawDescData = protoimpl.X.CompressGZIP(file_databus_proto_rawDescData)
	})
	return file_databus_proto_rawDescData
}

var file_databus_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_databus_proto_goTypes = []interface{}{
	(*Req)(nil),    // 0: databus.Req
	(*Res)(nil),    // 1: databus.Res
	(*LogReq)(nil), // 2: databus.LogReq
}
var file_databus_proto_depIdxs = []int32{
	0, // 0: databus.databus.create:input_type -> databus.Req
	0, // 1: databus.databus.update:input_type -> databus.Req
	0, // 2: databus.databus.delete:input_type -> databus.Req
	2, // 3: databus.databus.log:input_type -> databus.LogReq
	1, // 4: databus.databus.create:output_type -> databus.Res
	1, // 5: databus.databus.update:output_type -> databus.Res
	1, // 6: databus.databus.delete:output_type -> databus.Res
	1, // 7: databus.databus.log:output_type -> databus.Res
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_databus_proto_init() }
func file_databus_proto_init() {
	if File_databus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_databus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_databus_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_databus_proto_goTypes,
		DependencyIndexes: file_databus_proto_depIdxs,
		MessageInfos:      file_databus_proto_msgTypes,
	}.Build()
	File_databus_proto = out.File
	file_databus_proto_rawDesc = nil
	file_databus_proto_goTypes = nil
	file_databus_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatabusClient is the client API for Databus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatabusClient interface {
	Create(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	Update(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	Delete(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	Log(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*Res, error)
}

type databusClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabusClient(cc grpc.ClientConnInterface) DatabusClient {
	return &databusClient{cc}
}

func (c *databusClient) Create(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/databus.databus/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databusClient) Update(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/databus.databus/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databusClient) Delete(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/databus.databus/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databusClient) Log(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/databus.databus/log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabusServer is the server API for Databus service.
type DatabusServer interface {
	Create(context.Context, *Req) (*Res, error)
	Update(context.Context, *Req) (*Res, error)
	Delete(context.Context, *Req) (*Res, error)
	Log(context.Context, *LogReq) (*Res, error)
}

// UnimplementedDatabusServer can be embedded to have forward compatible implementations.
type UnimplementedDatabusServer struct {
}

func (*UnimplementedDatabusServer) Create(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedDatabusServer) Update(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedDatabusServer) Delete(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDatabusServer) Log(context.Context, *LogReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}

func RegisterDatabusServer(s *grpc.Server, srv DatabusServer) {
	s.RegisterService(&_Databus_serviceDesc, srv)
}

func _Databus_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabusServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databus.databus/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabusServer).Create(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Databus_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabusServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databus.databus/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabusServer).Update(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Databus_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabusServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databus.databus/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabusServer).Delete(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Databus_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabusServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databus.databus/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabusServer).Log(ctx, req.(*LogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Databus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "databus.databus",
	HandlerType: (*DatabusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Databus_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Databus_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Databus_Delete_Handler,
		},
		{
			MethodName: "log",
			Handler:    _Databus_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "databus.proto",
}
