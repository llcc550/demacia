// Code generated by goctl. DO NOT EDIT!
// Source: class.proto

package classclient

import (
	"context"

	"demacia/datacenter/class/rpc/class"

	"gitlab.u-jy.cn/xiaoyang/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClassInfo                 = class.ClassInfo
	ClassSubjectIdReq         = class.ClassSubjectIdReq
	ClassSubjectTeachInfoResp = class.ClassSubjectTeachInfoResp
	FullNameReq               = class.FullNameReq
	GradeInfo                 = class.GradeInfo
	IdReq                     = class.IdReq
	IdsReq                    = class.IdsReq
	ListByOrgIdResp           = class.ListByOrgIdResp
	ListGradeResp             = class.ListGradeResp
	NullResp                  = class.NullResp
	OrgIdReq                  = class.OrgIdReq
	StudentNumReq             = class.StudentNumReq

	Class interface {
		//  获取班级信息详情
		GetClassInfoById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ClassInfo, error)
		//  根据班级名称获取班级信息
		GetClassInfoByFullName(ctx context.Context, in *FullNameReq, opts ...grpc.CallOption) (*ClassInfo, error)
		//  获取机构下的班级列表
		ListByOrgId(ctx context.Context, in *OrgIdReq, opts ...grpc.CallOption) (*ListByOrgIdResp, error)
		//  获取机构下的学段列表
		ListGradeByOrgId(ctx context.Context, in *OrgIdReq, opts ...grpc.CallOption) (*ListGradeResp, error)
		//  获取学段列表
		ListGradesWithId(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*ListGradeResp, error)
		//  获取学段信息
		FindGradeById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*GradeInfo, error)
		//  改变班级人数
		ChangeStudentNum(ctx context.Context, in *StudentNumReq, opts ...grpc.CallOption) (*NullResp, error)
		//  根据班级Id,学科Id获取任课关系
		GetTeacherByClassIdAndSubjectId(ctx context.Context, in *ClassSubjectIdReq, opts ...grpc.CallOption) (*ClassSubjectTeachInfoResp, error)
	}

	defaultClass struct {
		cli zrpc.Client
	}
)

func NewClass(cli zrpc.Client) Class {
	return &defaultClass{
		cli: cli,
	}
}

//  获取班级信息详情
func (m *defaultClass) GetClassInfoById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*ClassInfo, error) {
	client := class.NewClassClient(m.cli.Conn())
	return client.GetClassInfoById(ctx, in, opts...)
}

//  根据班级名称获取班级信息
func (m *defaultClass) GetClassInfoByFullName(ctx context.Context, in *FullNameReq, opts ...grpc.CallOption) (*ClassInfo, error) {
	client := class.NewClassClient(m.cli.Conn())
	return client.GetClassInfoByFullName(ctx, in, opts...)
}

//  获取机构下的班级列表
func (m *defaultClass) ListByOrgId(ctx context.Context, in *OrgIdReq, opts ...grpc.CallOption) (*ListByOrgIdResp, error) {
	client := class.NewClassClient(m.cli.Conn())
	return client.ListByOrgId(ctx, in, opts...)
}

//  获取机构下的学段列表
func (m *defaultClass) ListGradeByOrgId(ctx context.Context, in *OrgIdReq, opts ...grpc.CallOption) (*ListGradeResp, error) {
	client := class.NewClassClient(m.cli.Conn())
	return client.ListGradeByOrgId(ctx, in, opts...)
}

//  获取学段列表
func (m *defaultClass) ListGradesWithId(ctx context.Context, in *IdsReq, opts ...grpc.CallOption) (*ListGradeResp, error) {
	client := class.NewClassClient(m.cli.Conn())
	return client.ListGradesWithId(ctx, in, opts...)
}

//  获取学段信息
func (m *defaultClass) FindGradeById(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*GradeInfo, error) {
	client := class.NewClassClient(m.cli.Conn())
	return client.FindGradeById(ctx, in, opts...)
}

//  改变班级人数
func (m *defaultClass) ChangeStudentNum(ctx context.Context, in *StudentNumReq, opts ...grpc.CallOption) (*NullResp, error) {
	client := class.NewClassClient(m.cli.Conn())
	return client.ChangeStudentNum(ctx, in, opts...)
}

//  根据班级Id,学科Id获取任课关系
func (m *defaultClass) GetTeacherByClassIdAndSubjectId(ctx context.Context, in *ClassSubjectIdReq, opts ...grpc.CallOption) (*ClassSubjectTeachInfoResp, error) {
	client := class.NewClassClient(m.cli.Conn())
	return client.GetTeacherByClassIdAndSubjectId(ctx, in, opts...)
}
