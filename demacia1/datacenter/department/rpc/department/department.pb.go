// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: department.proto

package department

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DepartmentIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartmentId int64 `protobuf:"varint,1,opt,name=departmentId,proto3" json:"departmentId,omitempty"`
}

func (x *DepartmentIdReq) Reset() {
	*x = DepartmentIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentIdReq) ProtoMessage() {}

func (x *DepartmentIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentIdReq.ProtoReflect.Descriptor instead.
func (*DepartmentIdReq) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{0}
}

func (x *DepartmentIdReq) GetDepartmentId() int64 {
	if x != nil {
		return x.DepartmentId
	}
	return 0
}

type DepartmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartmentId    int64  `protobuf:"varint,1,opt,name=departmentId,proto3" json:"departmentId,omitempty"`
	OrgId           int64  `protobuf:"varint,2,opt,name=orgId,proto3" json:"orgId,omitempty"`
	DepartmentTitle string `protobuf:"bytes,3,opt,name=departmentTitle,proto3" json:"departmentTitle,omitempty"`
	Sort            int64  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	MemberCount     int64  `protobuf:"varint,5,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
}

func (x *DepartmentInfo) Reset() {
	*x = DepartmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentInfo) ProtoMessage() {}

func (x *DepartmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentInfo.ProtoReflect.Descriptor instead.
func (*DepartmentInfo) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{1}
}

func (x *DepartmentInfo) GetDepartmentId() int64 {
	if x != nil {
		return x.DepartmentId
	}
	return 0
}

func (x *DepartmentInfo) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DepartmentInfo) GetDepartmentTitle() string {
	if x != nil {
		return x.DepartmentTitle
	}
	return ""
}

func (x *DepartmentInfo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *DepartmentInfo) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

type OrgIdAndDepartmentTitleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId           int64  `protobuf:"varint,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	DepartmentTitle string `protobuf:"bytes,2,opt,name=departmentTitle,proto3" json:"departmentTitle,omitempty"`
}

func (x *OrgIdAndDepartmentTitleReq) Reset() {
	*x = OrgIdAndDepartmentTitleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgIdAndDepartmentTitleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgIdAndDepartmentTitleReq) ProtoMessage() {}

func (x *OrgIdAndDepartmentTitleReq) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgIdAndDepartmentTitleReq.ProtoReflect.Descriptor instead.
func (*OrgIdAndDepartmentTitleReq) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{2}
}

func (x *OrgIdAndDepartmentTitleReq) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *OrgIdAndDepartmentTitleReq) GetDepartmentTitle() string {
	if x != nil {
		return x.DepartmentTitle
	}
	return ""
}

type OrgIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId int64 `protobuf:"varint,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
}

func (x *OrgIdReq) Reset() {
	*x = OrgIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgIdReq) ProtoMessage() {}

func (x *OrgIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgIdReq.ProtoReflect.Descriptor instead.
func (*OrgIdReq) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{3}
}

func (x *OrgIdReq) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type OrgIdAndDepartmentIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId        int64 `protobuf:"varint,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	DepartmentId int64 `protobuf:"varint,2,opt,name=departmentId,proto3" json:"departmentId,omitempty"`
}

func (x *OrgIdAndDepartmentIdReq) Reset() {
	*x = OrgIdAndDepartmentIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgIdAndDepartmentIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgIdAndDepartmentIdReq) ProtoMessage() {}

func (x *OrgIdAndDepartmentIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgIdAndDepartmentIdReq.ProtoReflect.Descriptor instead.
func (*OrgIdAndDepartmentIdReq) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{4}
}

func (x *OrgIdAndDepartmentIdReq) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *OrgIdAndDepartmentIdReq) GetDepartmentId() int64 {
	if x != nil {
		return x.DepartmentId
	}
	return 0
}

type OrgIdAndMemberIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    int64 `protobuf:"varint,1,opt,name=orgId,proto3" json:"orgId,omitempty"`
	MemberId int64 `protobuf:"varint,2,opt,name=memberId,proto3" json:"memberId,omitempty"`
}

func (x *OrgIdAndMemberIdReq) Reset() {
	*x = OrgIdAndMemberIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgIdAndMemberIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgIdAndMemberIdReq) ProtoMessage() {}

func (x *OrgIdAndMemberIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgIdAndMemberIdReq.ProtoReflect.Descriptor instead.
func (*OrgIdAndMemberIdReq) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{5}
}

func (x *OrgIdAndMemberIdReq) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *OrgIdAndMemberIdReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

type DepartmentListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Departments []*DepartmentInfo `protobuf:"bytes,1,rep,name=departments,proto3" json:"departments,omitempty"`
}

func (x *DepartmentListResp) Reset() {
	*x = DepartmentListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentListResp) ProtoMessage() {}

func (x *DepartmentListResp) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentListResp.ProtoReflect.Descriptor instead.
func (*DepartmentListResp) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{6}
}

func (x *DepartmentListResp) GetDepartments() []*DepartmentInfo {
	if x != nil {
		return x.Departments
	}
	return nil
}

type MemberIdsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberIds []int64 `protobuf:"varint,1,rep,packed,name=memberIds,proto3" json:"memberIds,omitempty"`
}

func (x *MemberIdsResp) Reset() {
	*x = MemberIdsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberIdsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberIdsResp) ProtoMessage() {}

func (x *MemberIdsResp) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberIdsResp.ProtoReflect.Descriptor instead.
func (*MemberIdsResp) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{7}
}

func (x *MemberIdsResp) GetMemberIds() []int64 {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

type DepartmentIdsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartmentIds []int64 `protobuf:"varint,1,rep,packed,name=departmentIds,proto3" json:"departmentIds,omitempty"`
}

func (x *DepartmentIdsResp) Reset() {
	*x = DepartmentIdsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentIdsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentIdsResp) ProtoMessage() {}

func (x *DepartmentIdsResp) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentIdsResp.ProtoReflect.Descriptor instead.
func (*DepartmentIdsResp) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{8}
}

func (x *DepartmentIdsResp) GetDepartmentIds() []int64 {
	if x != nil {
		return x.DepartmentIds
	}
	return nil
}

type DepartmentMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartmentId int64 `protobuf:"varint,1,opt,name=departmentId,proto3" json:"departmentId,omitempty"`
	MemberId     int64 `protobuf:"varint,2,opt,name=MemberId,proto3" json:"MemberId,omitempty"`
}

func (x *DepartmentMember) Reset() {
	*x = DepartmentMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentMember) ProtoMessage() {}

func (x *DepartmentMember) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentMember.ProtoReflect.Descriptor instead.
func (*DepartmentMember) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{9}
}

func (x *DepartmentMember) GetDepartmentId() int64 {
	if x != nil {
		return x.DepartmentId
	}
	return 0
}

func (x *DepartmentMember) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

type DepartmentMembersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartmentMembers []*DepartmentMember `protobuf:"bytes,1,rep,name=departmentMembers,proto3" json:"departmentMembers,omitempty"`
}

func (x *DepartmentMembersResp) Reset() {
	*x = DepartmentMembersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_department_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentMembersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentMembersResp) ProtoMessage() {}

func (x *DepartmentMembersResp) ProtoReflect() protoreflect.Message {
	mi := &file_department_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentMembersResp.ProtoReflect.Descriptor instead.
func (*DepartmentMembersResp) Descriptor() ([]byte, []int) {
	return file_department_proto_rawDescGZIP(), []int{10}
}

func (x *DepartmentMembersResp) GetDepartmentMembers() []*DepartmentMember {
	if x != nil {
		return x.DepartmentMembers
	}
	return nil
}

var File_department_proto protoreflect.FileDescriptor

var file_department_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x35,
	0x0a, 0x0f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x1a, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x20, 0x0a, 0x08, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x22, 0x53, 0x0a, 0x17, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x4f, 0x72, 0x67, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x52, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x52,
	0x0a, 0x10, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x63, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x11, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x32, 0xc2, 0x04, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c, 0x0a, 0x26, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26,
	0x2e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x67, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x64, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x22, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x42, 0x79, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x2e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x67, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d,
	0x0a, 0x15, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x14, 0x2e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a,
	0x22, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x14, 0x2e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0c, 0x5a, 0x0a,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_department_proto_rawDescOnce sync.Once
	file_department_proto_rawDescData = file_department_proto_rawDesc
)

func file_department_proto_rawDescGZIP() []byte {
	file_department_proto_rawDescOnce.Do(func() {
		file_department_proto_rawDescData = protoimpl.X.CompressGZIP(file_department_proto_rawDescData)
	})
	return file_department_proto_rawDescData
}

var file_department_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_department_proto_goTypes = []interface{}{
	(*DepartmentIdReq)(nil),            // 0: department.DepartmentIdReq
	(*DepartmentInfo)(nil),             // 1: department.DepartmentInfo
	(*OrgIdAndDepartmentTitleReq)(nil), // 2: department.OrgIdAndDepartmentTitleReq
	(*OrgIdReq)(nil),                   // 3: department.OrgIdReq
	(*OrgIdAndDepartmentIdReq)(nil),    // 4: department.OrgIdAndDepartmentIdReq
	(*OrgIdAndMemberIdReq)(nil),        // 5: department.OrgIdAndMemberIdReq
	(*DepartmentListResp)(nil),         // 6: department.DepartmentListResp
	(*MemberIdsResp)(nil),              // 7: department.MemberIdsResp
	(*DepartmentIdsResp)(nil),          // 8: department.DepartmentIdsResp
	(*DepartmentMember)(nil),           // 9: department.DepartmentMember
	(*DepartmentMembersResp)(nil),      // 10: department.DepartmentMembersResp
}
var file_department_proto_depIdxs = []int32{
	1,  // 0: department.DepartmentListResp.departments:type_name -> department.DepartmentInfo
	9,  // 1: department.DepartmentMembersResp.departmentMembers:type_name -> department.DepartmentMember
	0,  // 2: department.department.getDepartmentById:input_type -> department.DepartmentIdReq
	2,  // 3: department.department.getDepartmentByOrgIdAndDepartmentTitle:input_type -> department.OrgIdAndDepartmentTitleReq
	4,  // 4: department.department.getMemberIdsByOrgIdAndDepartmentId:input_type -> department.OrgIdAndDepartmentIdReq
	5,  // 5: department.department.getDepartmentIdsByOrgIdAndMemberId:input_type -> department.OrgIdAndMemberIdReq
	3,  // 6: department.department.getDepartmentsByOrgId:input_type -> department.OrgIdReq
	3,  // 7: department.department.getDepartmentMemberRelationByOrgId:input_type -> department.OrgIdReq
	1,  // 8: department.department.getDepartmentById:output_type -> department.DepartmentInfo
	1,  // 9: department.department.getDepartmentByOrgIdAndDepartmentTitle:output_type -> department.DepartmentInfo
	7,  // 10: department.department.getMemberIdsByOrgIdAndDepartmentId:output_type -> department.MemberIdsResp
	8,  // 11: department.department.getDepartmentIdsByOrgIdAndMemberId:output_type -> department.DepartmentIdsResp
	6,  // 12: department.department.getDepartmentsByOrgId:output_type -> department.DepartmentListResp
	10, // 13: department.department.getDepartmentMemberRelationByOrgId:output_type -> department.DepartmentMembersResp
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_department_proto_init() }
func file_department_proto_init() {
	if File_department_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_department_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_department_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_department_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgIdAndDepartmentTitleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_department_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_department_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgIdAndDepartmentIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_department_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgIdAndMemberIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_department_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_department_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberIdsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_department_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentIdsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_department_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_department_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentMembersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_department_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_department_proto_goTypes,
		DependencyIndexes: file_department_proto_depIdxs,
		MessageInfos:      file_department_proto_msgTypes,
	}.Build()
	File_department_proto = out.File
	file_department_proto_rawDesc = nil
	file_department_proto_goTypes = nil
	file_department_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DepartmentClient is the client API for Department service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DepartmentClient interface {
	// 根据id获取部门详情
	GetDepartmentById(ctx context.Context, in *DepartmentIdReq, opts ...grpc.CallOption) (*DepartmentInfo, error)
	// 根据机构ID和部门名称获取部门信息
	GetDepartmentByOrgIdAndDepartmentTitle(ctx context.Context, in *OrgIdAndDepartmentTitleReq, opts ...grpc.CallOption) (*DepartmentInfo, error)
	// 根据机构ID和部门ID获取部门下的人员ID列表
	GetMemberIdsByOrgIdAndDepartmentId(ctx context.Context, in *OrgIdAndDepartmentIdReq, opts ...grpc.CallOption) (*MemberIdsResp, error)
	// 根据机构ID和人员ID获取该人员所在的部门ID列表
	GetDepartmentIdsByOrgIdAndMemberId(ctx context.Context, in *OrgIdAndMemberIdReq, opts ...grpc.CallOption) (*DepartmentIdsResp, error)
	// 根据机构ID获取所有的部门
	GetDepartmentsByOrgId(ctx context.Context, in *OrgIdReq, opts ...grpc.CallOption) (*DepartmentListResp, error)
	// 根据机构ID获取所有的部门人员关系
	GetDepartmentMemberRelationByOrgId(ctx context.Context, in *OrgIdReq, opts ...grpc.CallOption) (*DepartmentMembersResp, error)
}

type departmentClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentClient(cc grpc.ClientConnInterface) DepartmentClient {
	return &departmentClient{cc}
}

func (c *departmentClient) GetDepartmentById(ctx context.Context, in *DepartmentIdReq, opts ...grpc.CallOption) (*DepartmentInfo, error) {
	out := new(DepartmentInfo)
	err := c.cc.Invoke(ctx, "/department.department/getDepartmentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) GetDepartmentByOrgIdAndDepartmentTitle(ctx context.Context, in *OrgIdAndDepartmentTitleReq, opts ...grpc.CallOption) (*DepartmentInfo, error) {
	out := new(DepartmentInfo)
	err := c.cc.Invoke(ctx, "/department.department/getDepartmentByOrgIdAndDepartmentTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) GetMemberIdsByOrgIdAndDepartmentId(ctx context.Context, in *OrgIdAndDepartmentIdReq, opts ...grpc.CallOption) (*MemberIdsResp, error) {
	out := new(MemberIdsResp)
	err := c.cc.Invoke(ctx, "/department.department/getMemberIdsByOrgIdAndDepartmentId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) GetDepartmentIdsByOrgIdAndMemberId(ctx context.Context, in *OrgIdAndMemberIdReq, opts ...grpc.CallOption) (*DepartmentIdsResp, error) {
	out := new(DepartmentIdsResp)
	err := c.cc.Invoke(ctx, "/department.department/getDepartmentIdsByOrgIdAndMemberId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) GetDepartmentsByOrgId(ctx context.Context, in *OrgIdReq, opts ...grpc.CallOption) (*DepartmentListResp, error) {
	out := new(DepartmentListResp)
	err := c.cc.Invoke(ctx, "/department.department/getDepartmentsByOrgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentClient) GetDepartmentMemberRelationByOrgId(ctx context.Context, in *OrgIdReq, opts ...grpc.CallOption) (*DepartmentMembersResp, error) {
	out := new(DepartmentMembersResp)
	err := c.cc.Invoke(ctx, "/department.department/getDepartmentMemberRelationByOrgId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentServer is the server API for Department service.
type DepartmentServer interface {
	// 根据id获取部门详情
	GetDepartmentById(context.Context, *DepartmentIdReq) (*DepartmentInfo, error)
	// 根据机构ID和部门名称获取部门信息
	GetDepartmentByOrgIdAndDepartmentTitle(context.Context, *OrgIdAndDepartmentTitleReq) (*DepartmentInfo, error)
	// 根据机构ID和部门ID获取部门下的人员ID列表
	GetMemberIdsByOrgIdAndDepartmentId(context.Context, *OrgIdAndDepartmentIdReq) (*MemberIdsResp, error)
	// 根据机构ID和人员ID获取该人员所在的部门ID列表
	GetDepartmentIdsByOrgIdAndMemberId(context.Context, *OrgIdAndMemberIdReq) (*DepartmentIdsResp, error)
	// 根据机构ID获取所有的部门
	GetDepartmentsByOrgId(context.Context, *OrgIdReq) (*DepartmentListResp, error)
	// 根据机构ID获取所有的部门人员关系
	GetDepartmentMemberRelationByOrgId(context.Context, *OrgIdReq) (*DepartmentMembersResp, error)
}

// UnimplementedDepartmentServer can be embedded to have forward compatible implementations.
type UnimplementedDepartmentServer struct {
}

func (*UnimplementedDepartmentServer) GetDepartmentById(context.Context, *DepartmentIdReq) (*DepartmentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentById not implemented")
}
func (*UnimplementedDepartmentServer) GetDepartmentByOrgIdAndDepartmentTitle(context.Context, *OrgIdAndDepartmentTitleReq) (*DepartmentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentByOrgIdAndDepartmentTitle not implemented")
}
func (*UnimplementedDepartmentServer) GetMemberIdsByOrgIdAndDepartmentId(context.Context, *OrgIdAndDepartmentIdReq) (*MemberIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberIdsByOrgIdAndDepartmentId not implemented")
}
func (*UnimplementedDepartmentServer) GetDepartmentIdsByOrgIdAndMemberId(context.Context, *OrgIdAndMemberIdReq) (*DepartmentIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentIdsByOrgIdAndMemberId not implemented")
}
func (*UnimplementedDepartmentServer) GetDepartmentsByOrgId(context.Context, *OrgIdReq) (*DepartmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentsByOrgId not implemented")
}
func (*UnimplementedDepartmentServer) GetDepartmentMemberRelationByOrgId(context.Context, *OrgIdReq) (*DepartmentMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentMemberRelationByOrgId not implemented")
}

func RegisterDepartmentServer(s *grpc.Server, srv DepartmentServer) {
	s.RegisterService(&_Department_serviceDesc, srv)
}

func _Department_GetDepartmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetDepartmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/department.department/GetDepartmentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetDepartmentById(ctx, req.(*DepartmentIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_GetDepartmentByOrgIdAndDepartmentTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgIdAndDepartmentTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetDepartmentByOrgIdAndDepartmentTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/department.department/GetDepartmentByOrgIdAndDepartmentTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetDepartmentByOrgIdAndDepartmentTitle(ctx, req.(*OrgIdAndDepartmentTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_GetMemberIdsByOrgIdAndDepartmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgIdAndDepartmentIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetMemberIdsByOrgIdAndDepartmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/department.department/GetMemberIdsByOrgIdAndDepartmentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetMemberIdsByOrgIdAndDepartmentId(ctx, req.(*OrgIdAndDepartmentIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_GetDepartmentIdsByOrgIdAndMemberId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgIdAndMemberIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetDepartmentIdsByOrgIdAndMemberId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/department.department/GetDepartmentIdsByOrgIdAndMemberId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetDepartmentIdsByOrgIdAndMemberId(ctx, req.(*OrgIdAndMemberIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_GetDepartmentsByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetDepartmentsByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/department.department/GetDepartmentsByOrgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetDepartmentsByOrgId(ctx, req.(*OrgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Department_GetDepartmentMemberRelationByOrgId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServer).GetDepartmentMemberRelationByOrgId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/department.department/GetDepartmentMemberRelationByOrgId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServer).GetDepartmentMemberRelationByOrgId(ctx, req.(*OrgIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Department_serviceDesc = grpc.ServiceDesc{
	ServiceName: "department.department",
	HandlerType: (*DepartmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getDepartmentById",
			Handler:    _Department_GetDepartmentById_Handler,
		},
		{
			MethodName: "getDepartmentByOrgIdAndDepartmentTitle",
			Handler:    _Department_GetDepartmentByOrgIdAndDepartmentTitle_Handler,
		},
		{
			MethodName: "getMemberIdsByOrgIdAndDepartmentId",
			Handler:    _Department_GetMemberIdsByOrgIdAndDepartmentId_Handler,
		},
		{
			MethodName: "getDepartmentIdsByOrgIdAndMemberId",
			Handler:    _Department_GetDepartmentIdsByOrgIdAndMemberId_Handler,
		},
		{
			MethodName: "getDepartmentsByOrgId",
			Handler:    _Department_GetDepartmentsByOrgId_Handler,
		},
		{
			MethodName: "getDepartmentMemberRelationByOrgId",
			Handler:    _Department_GetDepartmentMemberRelationByOrgId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "department.proto",
}
