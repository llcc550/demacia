// Code generated by goctl. DO NOT EDIT!
// Source: position.proto

package positionclient

import (
	"context"
	"demacia/datacenter/position/rpc/position"

	"gitlab.u-jy.cn/xiaoyang/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClassIdReq    = position.ClassIdReq
	PositionIdReq = position.PositionIdReq
	PositionInfo  = position.PositionInfo

	Position interface {
		FindByClassId(ctx context.Context, in *ClassIdReq, opts ...grpc.CallOption) (*PositionInfo, error)
		FindById(ctx context.Context, in *PositionIdReq, opts ...grpc.CallOption) (*PositionInfo, error)
	}

	defaultPosition struct {
		cli zrpc.Client
	}
)

func NewPosition(cli zrpc.Client) Position {
	return &defaultPosition{
		cli: cli,
	}
}

func (m *defaultPosition) FindByClassId(ctx context.Context, in *ClassIdReq, opts ...grpc.CallOption) (*PositionInfo, error) {
	client := position.NewPositionClient(m.cli.Conn())
	return client.FindByClassId(ctx, in, opts...)
}

func (m *defaultPosition) FindById(ctx context.Context, in *PositionIdReq, opts ...grpc.CallOption) (*PositionInfo, error) {
	client := position.NewPositionClient(m.cli.Conn())
	return client.FindById(ctx, in, opts...)
}
